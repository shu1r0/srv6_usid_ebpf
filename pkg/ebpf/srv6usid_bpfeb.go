// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSrv6usid returns the embedded CollectionSpec for srv6usid.
func loadSrv6usid() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Srv6usidBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load srv6usid: %w", err)
	}

	return spec, err
}

// loadSrv6usidObjects loads srv6usid and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*srv6usidObjects
//	*srv6usidPrograms
//	*srv6usidMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSrv6usidObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSrv6usid()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// srv6usidSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type srv6usidSpecs struct {
	srv6usidProgramSpecs
	srv6usidMapSpecs
}

// srv6usidSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type srv6usidProgramSpecs struct {
	DoUsidUD *ebpf.ProgramSpec `ebpf:"do_usid_uD"`
	DoUsidUN *ebpf.ProgramSpec `ebpf:"do_usid_uN"`
}

// srv6usidMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type srv6usidMapSpecs struct {
	Stats *ebpf.MapSpec `ebpf:"stats"`
}

// srv6usidObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSrv6usidObjects or ebpf.CollectionSpec.LoadAndAssign.
type srv6usidObjects struct {
	srv6usidPrograms
	srv6usidMaps
}

func (o *srv6usidObjects) Close() error {
	return _Srv6usidClose(
		&o.srv6usidPrograms,
		&o.srv6usidMaps,
	)
}

// srv6usidMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSrv6usidObjects or ebpf.CollectionSpec.LoadAndAssign.
type srv6usidMaps struct {
	Stats *ebpf.Map `ebpf:"stats"`
}

func (m *srv6usidMaps) Close() error {
	return _Srv6usidClose(
		m.Stats,
	)
}

// srv6usidPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSrv6usidObjects or ebpf.CollectionSpec.LoadAndAssign.
type srv6usidPrograms struct {
	DoUsidUD *ebpf.Program `ebpf:"do_usid_uD"`
	DoUsidUN *ebpf.Program `ebpf:"do_usid_uN"`
}

func (p *srv6usidPrograms) Close() error {
	return _Srv6usidClose(
		p.DoUsidUD,
		p.DoUsidUN,
	)
}

func _Srv6usidClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed srv6usid_bpfeb.o
var _Srv6usidBytes []byte
